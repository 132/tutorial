#+Title: Theorem Proving in Lean
#+Author: [[http://www.andrew.cmu.edu/user/avigad][Jeremy Avigad]], [[http://leodemoura.github.io][Leonardo de Moura]], [[http://www.cs.cmu.edu/~soonhok][Soonho Kong]]

* Quick Reference

** Displaying Information

#+BEGIN_SRC text
check <expr>                 : check the type of an expression
eval <expr>                  : evaluate expression
print <id>                   : print information about <id>
print notation               : display all notation
print notation <tokens>      : display notation using any of the tokens
print axioms                 : display assumed axioms
print options                : display options set by user or emacs mode
print prefix <namespace>     : display all declarations in the namespace
print coercions              : display all coercions
print coercions <source>     : display only the coercions from <source>
print classes                : display all classes
print instances <class name> : display all instances of the given class
print fields <structure>     : display all "fields" of a structure
print metaclasses            : show kinds of metadata stored in a namespace
help commands                : display all available commands
help options                 : display all available options
#+END_SRC

** Setting Options

#+BEGIN_SRC text
pp.implicit        : display implicit arguments
pp.universes       : display hidden universe parameters
pp.coercions       : show coercions
pp.notation        : display output using defined notations
pp.beta            : beta reduce terms before displaying them
pp.all             : disable notations, display implicit arguments, hidden universe parameters and coercions
pp.max_depth       : maximum expression depth
pp.max_steps       : maximum steps for printing expression
pp.full_names      : use full names for identifiers
pp.private_names   : show internal name assigned to private definitions and theorems
pp.metavar_args    : show arguments to metavariables
pp.numerals        : print output as numerals
pp.abbreviations   : show abbreviations
#+END_SRC

** Attributes

These can generally be declared with a =definition= or =theorem=, or
using the =attribute= or =local attribute= commands.
#+BEGIN_SRC text
reducible       : unfold during elaboration if necessary
irreducible     : avoid unfolding during elaboration
semireducible   : unfold when not performance critical
coercion        : use as a coercion between types
class           : type class declaration
instance        : type class instance
parsing-only    : use notation only for input
unfold_c        : (TODO: find better name for attribute)
recursor        : user-defined recursor/eliminator
refl            : reflexivity lemma, used for calc-expressions, tactics and simplifier
symm            : symmetry lemma, used for calc-expressions, tactics and simplifier
trans           : transitivity lemma, used for calc-expressions, tactics and simplifier
#+END_SRC

** Proof Elements

Term Mode:
#+BEGIN_SRC text
take, assume    : syntactic sugar for lambda
let             : introduce local definitions
have            : introduce auxiliary fact (opaque, in the body)
assert          : like "have", but visible to tactics
show            : make result type explicit
match ... with  : introduce proof or definition by cases
proof ... qed   : introduce a proof or definition block, elaborated separately
#+END_SRC

Tactic Mode:
#+BEGIN_SRC text
begin ... end   : enter tactic mode, and blocking mechanism within tactic mode
have            : as in term mode (enters term mode), but visible to tactics
show            : as in term mode (enters term mode)
match ... with  : as in term mode (enters term mode)
let             : introduce local fact (opaque, in the body)
#+END_SRC

** Sectioning Mechanisms

#+BEGIN_SRC text
namespace <id> ... end <id>  : begin / end namespace
section ... end              : begin / end section
section <id> .... end <id>   : begin / end section

variable (var : type)        : introduce variable where needed
variable {var : type)        : introduce implicit variable where needed
variable [var : type]        : introduce class inference variable where needed
parameter                    : introduce variable, fixed within the section
include                      : include variable in subsequence definitions
omit                         : undoes "include"
#+END_SRC

** Tactics
We say a tactic is more "aggressive" when it uses a more expensive (and complete) unification algorithm,
and/or unfolds more aggressively definitions.

General tactics:
#+BEGIN_SRC text
apply <expr>      : apply a theorem to the goal, create subgoals for non-dependent premises
fapply <expr>     : like apply, but create subgoals also for dependent premises that were not assigned by unification procedure
eapply <expr>     : like apply, but used for applying recursor-like definitions (TODO: the 'e' prefix is misleading since we usually use it for the "expensive" version, what about 'rapply')
exact <expr>      : apply and close goal, or fail
rexact <expr>     : relaxed (and more expensive) version of exact (TODO: should it be called 'eexact'? the expensive-exact)
refine <expr>     : like exact, but creates subgoals for unresolved subgoals

intro <id>        : introduce a quantified variable or hypothesis
intro             : let Lean choose a name
intros <ids>      : introduce multiple variables or hypotheses
intros            : let Lean choose the names

rename <id> <id>  : rename a variable or hypothesis
generalize <expr> (<id>)? : generalize an expression
clear <ids>       : clear variables or hypotheses
revert <ids>      : move variables or hypotheses into the goal
assumption        : try to close a goal with something in the context
eassumption       : a more aggressive ("expensive") form of assumption
#+END_SRC

Equational reasoning:
#+BEGIN_SRC text
esimp                : simplify expressions in goal (TODO: 'e' here is supposed to mean "evaluator" :-(, I wanted to use 'simp' for the simplifier)
esimp at <id>        : simplify hypothesis in context
esimp at *           : simplify everything
esimp [<id>]         : unfold definition and simplify expressions in goal
esimp [<id>] at <id> : unfold definition and simplify hypothesis in context
esimp [<id>] at *    : unfold definition and simplify everything
unfold <id>          : similar to (esimp <id>)
fold <expr>          : unfold given function application, search for convertible term in the goal, and replace it with <expr>

beta                : beta reduce goal

rewrite <expr>      : apply a rewrite rule
rewrite <expr-list> : apply a sequence of rewrites
krewrite            : a more aggressive form of rewrite, using keyed rewriting
xrewrite            : a more aggressive form of rewrite (TODO: should we rename it to 'erewrite'?)

subst <id>        : substitute a variable defined in the context, and clear hypothesis and variable
subst_vars        : substitute all variables in the context
#+END_SRC

Induction and cases:
#+BEGIN_SRC text
cases <expr> (using {ids})?     : decompose an element of an inductive type
induction <expr> (using {ids})? : use induction
constructor                     : construct an element of an inductive type by applying the first constructor that succeeds
constructor <i>                 : construct an element of an inductive type by applying the ith-constructor
fconstructor                    : construct an element of an inductive type by (fapply)ing the first constructor that succeeds
fconstructor <i>                : construct an element of an inductive type by (fapply)ing the ith-constructor
injectivity                     : use injectivity of constructors
split                           : equivalent to (constructor 0), and is only applicable to inductive datatypes with a single constructor (aka and introduction)
left                            : equivalent to (constructor 0), and is only applicable to inductive datatypes with two constructor (aka left or introduction)
right                           : equivalent to (constructor 1), and is only applicable to inductive datatypes with two constructor (aka right or introduction)
existsi <expr>                  : similar to (constructor 0) but we can provide an argument to the constructor, useful for performing exists/sigma introduction

#+END_SRC

Special-purpose tactics:
#+BEGIN_SRC text
contradiction       : close contradictory goal
exfalso             : implements the “ex falso quodlibet” logical principle
congruence          : solve goals of the form (f a_1 ... a_n = f' b_1 ... b_n) by congruence
reflexivity         : reflexivity of equality (or any relation marked with attribute refl)
symmetry            : symmetry of equality (or any relation marked with attribute symm)
transitivity <expr> : transitivity of equality (or any relation marked with attribute trans)
trivial             : apply true introduction
#+END_SRC

Combinators:
#+BEGIN_SRC text
and_then <tac1> <tac2> (notation: <tac1> ; <tac2>)  : execute <tac1> and then execute <tac2> (aka sequential composition)
or_else <tac1> <tac2> (notation: (<tac1> | <tac2>)) : execute <tac1> if it fails, execute <tac2>
append  <tac1> <tac2>    : execute <tac1> and <tac2> and append their proof state streams
interleave <tac1> <tac2> : execute <tac1> and <tac2> and interleave the proof state streams produced by them
par <tac1> <tac2>        : execute <tac1> and <tac2> in parallel
fixpoint (fun t, <tac>)  : fixpoint tactic, <tac> may refer to t
try <tac>                : execute <tac>, if it fails do nothing
repeat <tac>             : repeat <tac> zero or more times (until it fails)
repeat1 <tac>            : like (repeat <tac>), but fails if <tac> does not succeed at least once
at_most <num> <tac>      : like (repeat <tac>), but execute <tac> at most <num> times
do <num> <tac>           : execute <tac> exactly <num> times
determ <tac>             : discard all but the first proof state produced by <tac>
discard <tac> <num>      : discard the first <num> proof-states produced by <tac>
#+END_SRC

Goal management:
#+BEGIN_SRC text
focus_at <tac> <i>  : execute <tac> to the ith-goal, and fail if it is not solved
focus  <tac>        : equivalent to (focus_at <tac> 0)
rotate_left  <num>  : rotate goals to the left <num> times
rorate_right <num>  : rotate goals to the right <num> times
rotate <num>        : equivalent to (rotate_left <num>)
all_goals <tac>     : execute <tac> to all goals in the current proof state
fail                : tactic that always fails
id                  : tactic that always succeeds
now                 : fail if there are unsolved goals
whnf                : put goal in weak head normal form
change <expr>       : change the goal to <expr> if it is convertible to <expr>
#+END_SRC

Information and debugging tactics:
#+BEGIN_SRC text
state               : display the current proof state
check_expr <expr>   : display the type of the given expression in the current goal
trace <string>      : display the current string
#+END_SRC

** Emacs Lean-mode commands

Flycheck commands:
#+BEGIN_SRC text
C-c ! n    : next error
C-c ! p    : previous error
C-c ! l    : list errors
C-c C-x    : execute Lean (in stand-alone mode)
#+END_SRC

Lean-specific commands:
#+BEGIN_SRC text
C-c C-k    : show how to enter unicode symbol
C-c C-o    : set Lean options
C-c C-e    : execute Lean command
C-c C-r    : restart Lean process
#+END_SRC

** Unicode Symbols

This section lists some of the Unicode symbols that are used in the
Lean library, their ASCII equivalents, and the keystrokes that can be
used to enter them in the Emacs Lean mode.

Logical symbols:

| Unicode | Ascii  | Emacs                   |
|---------+--------+-------------------------|
| true    |        |                         |
| false   |        |                         |
| ¬       | not    | =\not=, =\neg=          |
| ∧       | /\     | =\and=                  |
| ‌∨       | \/     | =\or=                   |
| →       | ->     | =\to=, =\r=, =\implies= |
| ↔       | <->    | =\iff=, =\lr=           |
| ∀       | forall | =\all=                  |
| ∃       | exists | =\ex=                   |
| λ       | fun    | =\lam=, =\fun=          |
| ≠       | ~=     | =\ne=                   |

Types:

| Π | Pi    | =\Pi=                     |
| → | ->    | =\to=, =\r=, =\implies=   |
| Σ | Sigma | =\S=, =\Sigma=            |
| × | prod  | =\times=                  |
| ⊎ | sum   | =\union=, =\u+=, =\uplus= |
| ℕ | nat   | =\nat=                    |
| ℤ | int   | =\int=                    |
| ℚ | rat   | =\rat=                    |
| ℝ | real  | =\real=                   |

When you open the namespaces =prod= and =sum=, you can use =*= and =+=
for the types =prod= and =sum= respectively. To avoid overwriting
notation, these have to have the same precedence as the arithmetic
operations. If you don't need to use notation for the arithmetic
operations, you can obtain lower-precedence versions by opening the
namespaces =low_precedence_times= and =low_precedence_plus=
respectively.

Greek letters:

| Unicode | Emacs    |
|---------+----------|
| α       | =\alpha= |
| β       | =\beta=  |
| γ       | =\gamma= |
| ...     | ...      |

Equality proofs (=open eq.ops=):

| Unicode | Ascii | Emacs         |
|---------+-------+---------------|
| ⁻¹      | eq.symm  | =\sy=, =\inv= |
| ⬝       | eq.trans | =\tr=         |
| ▸       | eq.subst | =\t=          |

Symbols for the rewrite tactic:

| Unicode | Ascii | Emacs |
|---------+-------+-------|
| ↑       | ^     | =\u=  |
| ↓       | <d    | =\d=  |

Brackets:

| Unicode | Ascii | Emacs         |
|---------+-------+---------------|
| ⌞t⌟     | ?(t)  | =\cll t \clr= |
| ⦃ t ⦄   | {{t}} | =\{{ t \}}    |
| ⟨ t ⟩   |       | =\< t \>=     |
| ⟪ t ⟫   |       | =\<< t \>>=   |


Set theory:

| Unicode | Ascii    | Emacs    |
|---------+----------+----------|
| ∈       | mem      | =\in=    |
| ∉       |          | =\nin=   |
| ∩       | inter    | =\i=     |
| ∪       | union    | =\un=    |
| ⊆       | subseteq | =\subeq= |

Binary relations:

| Unicode | Ascii | Emacs    |   |
|---------+-------+----------+---|
| ≤       | <=    | =\le=    |   |
| ≥       | >=    | =\ge=    |   |
| ∣       | dvd   | =\∣=     |   |
| ≡       |       | =\equiv= |   |
| ≈       |       | =\eq=    |   |


Binary operations:

| Unicode | Ascii | Emacs   |
|---------+-------+---------|
| ∘       | comp  | =\comp= |
